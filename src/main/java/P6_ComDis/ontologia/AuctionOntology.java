// file: AuctionOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package P6_ComDis.ontologia;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: AuctionOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2021/05/5, 21:39:32
 */
public class AuctionOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -9098608021565808103L;

  //NAME
  public static final String ONTOLOGY_NAME = "Auction";
  // The singleton instance of this ontology
  private static Ontology theInstance = new AuctionOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String OFFER_AUCTIONROUND="auctionRound";
    public static final String OFFER="Offer";
    public static final String ENDAUCTION_AUCTION="auction";
    public static final String ENDAUCTION="EndAuction";
    public static final String ENDROUND_AUCTIONROUND="auctionRound";
    public static final String ENDROUND="EndRound";
    public static final String BID_AUCTIONROUND="auctionRound";
    public static final String BID="Bid";
    public static final String AUCTION_BOOK="book";
    public static final String AUCTION_ACTUALPRICE="actualPrice";
    public static final String AUCTION_AUCTIONID="auctionID";
    public static final String AUCTION_ACTUALWINNER="actualWinner";
    public static final String AUCTION="Auction";
    public static final String AUCTIONROUND_ROUNDPRICE="roundPrice";
    public static final String AUCTIONROUND_AUCTION="auction";
    public static final String AUCTIONROUND="AuctionRound";

  /**
   * Constructor
  */
  private AuctionOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema auctionRoundSchema = new ConceptSchema(AUCTIONROUND);
    add(auctionRoundSchema, P6_ComDis.ontologia.AuctionRound.class);
    ConceptSchema auctionSchema = new ConceptSchema(AUCTION);
    add(auctionSchema, P6_ComDis.ontologia.Auction.class);

    // adding AgentAction(s)
    AgentActionSchema bidSchema = new AgentActionSchema(BID);
    add(bidSchema, P6_ComDis.ontologia.Bid.class);
    AgentActionSchema endRoundSchema = new AgentActionSchema(ENDROUND);
    add(endRoundSchema, P6_ComDis.ontologia.EndRound.class);
    AgentActionSchema endAuctionSchema = new AgentActionSchema(ENDAUCTION);
    add(endAuctionSchema, P6_ComDis.ontologia.EndAuction.class);
    AgentActionSchema offerSchema = new AgentActionSchema(OFFER);
    add(offerSchema, P6_ComDis.ontologia.Offer.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    auctionRoundSchema.add(AUCTIONROUND_AUCTION, auctionSchema, ObjectSchema.MANDATORY);
    auctionRoundSchema.add(AUCTIONROUND_ROUNDPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    auctionSchema.add(AUCTION_ACTUALWINNER, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    auctionSchema.add(AUCTION_AUCTIONID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    auctionSchema.add(AUCTION_ACTUALPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    auctionSchema.add(AUCTION_BOOK, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    bidSchema.add(BID_AUCTIONROUND, auctionRoundSchema, ObjectSchema.MANDATORY);
    endRoundSchema.add(ENDROUND_AUCTIONROUND, auctionRoundSchema, ObjectSchema.MANDATORY);
    endAuctionSchema.add(ENDAUCTION_AUCTION, auctionSchema, ObjectSchema.MANDATORY);
    offerSchema.add(OFFER_AUCTIONROUND, auctionRoundSchema, ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
