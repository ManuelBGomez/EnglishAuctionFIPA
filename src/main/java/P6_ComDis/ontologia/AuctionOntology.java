// file: AuctionOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package P6_ComDis.ontologia;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: AuctionOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2021/05/11, 21:25:05
 */
public class AuctionOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -772136991049806111L;

  //NAME
  public static final String ONTOLOGY_NAME = "Auction";
  // The singleton instance of this ontology
  private static Ontology theInstance = new AuctionOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String OFFER_BOOKOFFER="bookOffer";
    public static final String OFFER="Offer";
    public static final String ENDAUCTION_AUCTIONWINNER="auctionWinner";
    public static final String ENDAUCTION_LASTOFFER="lastOffer";
    public static final String ENDAUCTION="EndAuction";
    public static final String ENDROUND_LASTOFFER="lastOffer";
    public static final String ENDROUND_WINNER="winner";
    public static final String ENDROUND="EndRound";
    public static final String BID_BOOKOFFER="bookOffer";
    public static final String BID="Bid";
    public static final String BOOK_BNAME="bName";
    public static final String BOOK="Book";
    public static final String BOOKOFFER_PRICE="price";
    public static final String BOOKOFFER_AUCTIONID="auctionId";
    public static final String BOOKOFFER_BOOKINFO="bookInfo";
    public static final String BOOKOFFER="BookOffer";

  /**
   * Constructor
  */
  private AuctionOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema bookOfferSchema = new ConceptSchema(BOOKOFFER);
    add(bookOfferSchema, P6_ComDis.ontologia.BookOffer.class);
    ConceptSchema bookSchema = new ConceptSchema(BOOK);
    add(bookSchema, P6_ComDis.ontologia.Book.class);

    // adding AgentAction(s)
    AgentActionSchema bidSchema = new AgentActionSchema(BID);
    add(bidSchema, P6_ComDis.ontologia.Bid.class);
    AgentActionSchema endRoundSchema = new AgentActionSchema(ENDROUND);
    add(endRoundSchema, P6_ComDis.ontologia.EndRound.class);
    AgentActionSchema endAuctionSchema = new AgentActionSchema(ENDAUCTION);
    add(endAuctionSchema, P6_ComDis.ontologia.EndAuction.class);
    AgentActionSchema offerSchema = new AgentActionSchema(OFFER);
    add(offerSchema, P6_ComDis.ontologia.Offer.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    bookOfferSchema.add(BOOKOFFER_BOOKINFO, bookSchema, ObjectSchema.MANDATORY);
    bookOfferSchema.add(BOOKOFFER_AUCTIONID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    bookOfferSchema.add(BOOKOFFER_PRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    bookSchema.add(BOOK_BNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    bidSchema.add(BID_BOOKOFFER, bookOfferSchema, ObjectSchema.MANDATORY);
    endRoundSchema.add(ENDROUND_WINNER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    endRoundSchema.add(ENDROUND_LASTOFFER, bookOfferSchema, ObjectSchema.MANDATORY);
    endAuctionSchema.add(ENDAUCTION_LASTOFFER, bookOfferSchema, ObjectSchema.MANDATORY);
    endAuctionSchema.add(ENDAUCTION_AUCTIONWINNER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_BOOKOFFER, bookOfferSchema, ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
